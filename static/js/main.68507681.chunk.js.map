{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleChange","event","setState","userInput","target","value","handleTitle","inputTitle","handleClick","preventDefault","dbRef","database","ref","state","dreamObjectTwo","dream","title","vote","push","errorMessage","window","location","handleVote","voteId","once","snapshot","newValue","val","set","handleRemove","dreamId","child","remove","dreams","on","data","newDreamsArray","key","className","action","htmlFor","onChange","this","type","id","placeholder","maxLength","name","rows","onClick","map","dreamObject","for","icon","faHeart","faTimes","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68507681.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCgA-RgJ1ifzC4V4GRLZzEkxkNWAOLi4lY\",\r\n    authDomain: \"project-5-test-120f1.firebaseapp.com\",\r\n    databaseURL: \"https://project-5-test-120f1.firebaseio.com\",\r\n    projectId: \"project-5-test-120f1\",\r\n    storageBucket: \"project-5-test-120f1.appspot.com\",\r\n    messagingSenderId: \"120232366961\",\r\n    appId: \"1:120232366961:web:3409e30e67044ea2aedcd0\"\r\n};\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport default firebase;\r\n","import React, {Component} from 'react';\r\nimport firebase from './firebase';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      dreams: [],\r\n      userInput: '',\r\n      inputTitle: '',\r\n      errorMessage: '',\r\n    }\r\n  }\r\n\r\n  // pull data from firebase to display\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on('value', (snapshot) => {\r\n\r\n      const data = snapshot.val();\r\n\r\n      const newDreamsArray = [];\r\n\r\n      for (let key in data) {\r\n        newDreamsArray.push({\r\n          key: key,\r\n          data: data[key]\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        dreams: newDreamsArray\r\n      })\r\n    })\r\n  }\r\n\r\n  // dream content event listener\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      userInput: event.target.value\r\n    })\r\n  }\r\n\r\n  // title event listener\r\n  handleTitle = (event) => {\r\n    this.setState({\r\n      inputTitle: event.target.value\r\n    })\r\n  }\r\n\r\n  // push dream input data to firebase\r\n  handleClick= (event) => {\r\n    event.preventDefault();\r\n\r\n    const dbRef = firebase.database().ref();\r\n\r\n    if (this.state.userInput !== \"\" && this.state.inputTitle !== \"\") {\r\n      // push dream object to firebase\r\n      const dreamObjectTwo = {\r\n        dream: this.state.userInput,\r\n        title: this.state.inputTitle,\r\n        vote: 0\r\n      }\r\n      dbRef.push(dreamObjectTwo);\r\n\r\n      // reset error handling\r\n      this.setState({\r\n        errorMessage: '',\r\n      })\r\n\r\n      window.location = \"#addedDream\";\r\n    } else {\r\n      // error handling\r\n      this.setState({\r\n        errorMessage: \"Please give your entry a title and content before submitting\"\r\n      })\r\n    }\r\n\r\n    // clear input text\r\n    this.setState({\r\n      inputTitle: '',\r\n      userInput: ''\r\n    })\r\n  }\r\n\r\n  // upvote selected entry\r\n  handleVote = (voteId) => {\r\n    const dbRef = firebase.database().ref(`/${voteId}`);\r\n\r\n    dbRef.once('value', (snapshot) => {\r\n      const newValue = snapshot.val();\r\n      newValue.vote++;\r\n\r\n      dbRef.set(newValue);\r\n    }) \r\n  }\r\n\r\n  // remove entry\r\n  handleRemove = (dreamId) => {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.child(dreamId).remove();\r\n  }\r\n  \r\n  \r\n\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"app\">\r\n        <section className=\"top\">\r\n          <div className=\"wrapper\">\r\n            <h1>Dream Share</h1>\r\n            <h3>A place for everyone to document their dreams and explore the bizarre world of the subconcious</h3>\r\n            <form action=\"submit\">\r\n              <label htmlFor=\"newTitle\">give your dream a title</label>\r\n              <input onChange={this.handleTitle} value={this.state.inputTitle}type=\"text\" id=\"newTitle\" className=\"titleInput\" placeholder=\"Title\" maxLength=\"20\"/>\r\n              <label htmlFor=\"newDream\">tell us about a dream you've had</label>\r\n              <textarea \r\n                  name=\"newDream\" \r\n                  id=\"newDream\" \r\n                  className=\"dreamInput\" \r\n                  rows=\"20\" \r\n                  onChange={this.handleChange}\r\n                  value={this.state.userInput} \r\n                  maxLength=\"1100\"\r\n                  placeholder=\"One night I dreamt...\"\r\n              ></textarea>\r\n              <button className=\"addDream\" onClick={this.handleClick}>Share Dream</button>\r\n            </form>\r\n\r\n            <p className=\"errorMessage\">{this.state.errorMessage}</p>\r\n          </div>\r\n        </section>\r\n        <section className=\"displaySection\">\r\n          <ul className=\"dreamDisplay wrapper\">\r\n            {\r\n              this.state.dreams.map( (dreamObject) => {\r\n                return (\r\n                <li key={dreamObject.key} className=\"returnDream\">\r\n                  <h2>{dreamObject.data.title}</h2>\r\n                  <p>{dreamObject.data.dream}</p>\r\n                  <div className=\"upVote\">\r\n                    <p>{dreamObject.data.vote}</p>\r\n                    <label for=\"voteLike\" className=\"srOnly\">like this dream</label>\r\n                    <button className=\"voteButton\" name=\"voteLike\" onClick={() => this.handleVote(dreamObject.key)}><FontAwesomeIcon icon={faHeart}/></button>\r\n                  </div>\r\n                  <label for=\"removeEntry\" className=\"srOnly\">remove this dream entry</label>\r\n                  <button className=\"removeButton\" name=\"removeEntry\" onClick={() => this.handleRemove(dreamObject.key)}><FontAwesomeIcon icon={faTimes}/></button>\r\n                </li>\r\n                )\r\n              })\r\n            }\r\n          </ul>\r\n        </section>\r\n        <footer id='addedDream'>\r\n          <p>Created by Arman Aliani</p>\r\n        </footer>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}