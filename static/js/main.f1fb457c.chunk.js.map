{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleChange","event","setState","userInput","target","value","handleTitle","inputTitle","handleClick","preventDefault","dbRef","database","ref","state","dreamObjectTwo","dream","title","vote","push","errorMessage","handleVote","voteId","console","log","child","handleRemove","dreamId","remove","dreams","on","snapshot","data","val","newDreamsArray","key","className","action","htmlFor","onChange","this","type","id","name","rows","onClick","map","dreamObject","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uTAaAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,8CAMIR,QAAf,EC0IeS,G,wDArJb,aAAe,IAAD,8BACZ,gBAgCFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAWF,EAAMG,OAAOC,SAnCd,EAuCdC,YAAc,SAACL,GACb,EAAKC,SAAS,CACZK,WAAYN,EAAMG,OAAOC,SAzCf,EA6CdG,YAAa,SAACP,GACZA,EAAMQ,iBAEN,IAAMC,EAAQpB,EAASqB,WAAWC,MAElC,GAA6B,KAAzB,EAAKC,MAAMV,WAA8C,KAA1B,EAAKU,MAAMN,WAAmB,CAE/D,IAAMO,EAAiB,CACrBC,MAAO,EAAKF,MAAMV,UAClBa,MAAO,EAAKH,MAAMN,WAClBU,KAAM,GAERP,EAAMQ,KAAKJ,GAGX,EAAKZ,SAAS,CACZiB,aAAc,UAIhB,EAAKjB,SAAS,CACZiB,aAAc,6CAKlB,EAAKjB,SAAS,CACZK,WAAY,GACZJ,UAAW,MAzED,EA6EdiB,WAAa,SAACC,GACZ,IAAMX,EAAQpB,EAASqB,WAAWC,MAElCU,QAAQC,IAAIb,EAAMc,MAAMH,KAhFZ,EA6FdI,aAAe,SAACC,GACApC,EAASqB,WAAWC,MAE5BY,MAAME,GAASC,UA9FrB,EAAKd,MAAQ,CACXe,OAAQ,GACRzB,UAAW,GACXI,WAAY,GACZY,aAAc,IANJ,E,gEAWO,IAAD,OACJ7B,EAASqB,WAAWC,MAE5BiB,GAAG,SAAS,SAACC,GAEjB,IAAMC,EAAOD,EAASE,MAEhBC,EAAiB,GAEvB,IAAK,IAAIC,KAAOH,EACdE,EAAef,KAAK,CAClBgB,IAAKA,EACLH,KAAMA,EAAKG,KAIf,EAAKhC,SAAS,CACZ0B,OAAQK,S,+BA0EJ,IAAD,OACP,OACE,0BAAME,UAAU,OACd,6BAASA,UAAU,OACjB,yBAAKA,UAAU,WACb,sCAEA,0BAAMC,OAAO,UACX,2BAAOC,QAAQ,YAAf,2BACA,2BAAOC,SAAUC,KAAKjC,YAAaD,MAAOkC,KAAK1B,MAAMN,WAAWiC,KAAK,OAAOC,GAAG,aAC/E,2BAAOJ,QAAQ,YAAf,mCACA,8BACIK,KAAK,WACLD,GAAG,WACHN,UAAU,aACVQ,KAAK,KACLL,SAAUC,KAAKvC,aACfK,MAAOkC,KAAK1B,MAAMV,YAEtB,4BAAQyC,QAASL,KAAK/B,aAAtB,cAGF,uBAAG2B,UAAU,gBAAgBI,KAAK1B,MAAMM,gBAG5C,6BAASgB,UAAU,kBACjB,wBAAIA,UAAU,wBAEVI,KAAK1B,MAAMe,OAAOiB,KAAK,SAACC,GACtB,OACA,wBAAIZ,IAAKY,EAAYZ,IAAKC,UAAU,eAClC,4BAAKW,EAAYf,KAAKf,OACtB,2BAAI8B,EAAYf,KAAKhB,OACrB,2BAAI+B,EAAYf,KAAKd,MACrB,4BAAQ2B,QAAS,kBAAM,EAAKxB,WAAW0B,EAAYZ,OAAnD,UACA,4BAAQU,QAAS,kBAAM,EAAKnB,aAAaqB,EAAYZ,OAArD,qB,GA1IAa,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.f1fb457c.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCgA-RgJ1ifzC4V4GRLZzEkxkNWAOLi4lY\",\r\n    authDomain: \"project-5-test-120f1.firebaseapp.com\",\r\n    databaseURL: \"https://project-5-test-120f1.firebaseio.com\",\r\n    projectId: \"project-5-test-120f1\",\r\n    storageBucket: \"project-5-test-120f1.appspot.com\",\r\n    messagingSenderId: \"120232366961\",\r\n    appId: \"1:120232366961:web:3409e30e67044ea2aedcd0\"\r\n};\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport default firebase;\r\n","import React, {Component} from 'react';\nimport firebase from './firebase';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dreams: [],\n      userInput: '',\n      inputTitle: '',\n      errorMessage: '',\n      // vote: 0,\n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (snapshot) => {\n\n      const data = snapshot.val();\n\n      const newDreamsArray = [];\n\n      for (let key in data) {\n        newDreamsArray.push({\n          key: key,\n          data: data[key]\n        });\n      }\n\n      this.setState({\n        dreams: newDreamsArray\n      })\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value\n    })\n  }\n\n  handleTitle = (event) => {\n    this.setState({\n      inputTitle: event.target.value\n    })\n  }\n\n  handleClick= (event) => {\n    event.preventDefault();\n\n    const dbRef = firebase.database().ref();\n\n    if (this.state.userInput !== \"\" && this.state.inputTitle !== \"\") {\n      // push dream object to firebase\n      const dreamObjectTwo = {\n        dream: this.state.userInput,\n        title: this.state.inputTitle,\n        vote: 0\n      }\n      dbRef.push(dreamObjectTwo);\n\n      // reset error handling\n      this.setState({\n        errorMessage: '',\n      })\n    } else {\n      // error handling\n      this.setState({\n        errorMessage: \"Please enter a message before submitting\"\n      })\n    }\n\n    // clear input text\n    this.setState({\n      inputTitle: '',\n      userInput: ''\n    })\n  }\n\n  handleVote = (voteId) => {\n    const dbRef = firebase.database().ref();\n\n    console.log(dbRef.child(voteId));\n    // console.log(dbRef.child(voteId).orderByChild('vote').equalTo(this.state.dreams.vote));\n    // console.log(this.state.dreams);\n    // const votePlusOne = () => {\n    //   // return this.state.dreams.data.vote + 1;\n    //   console.log(this.state.dreams.data);\n    // }\n\n    // const newVoteCount = votePlusOne();\n    // console.log(newVoteCount);\n    // dbRef.push(newVoteCount);\n  }\n\n  handleRemove = (dreamId) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(dreamId).remove();\n  }\n  \n  \n\n\n  render() {\n    return (\n      <main className=\"App\">\n        <section className=\"top\">\n          <div className=\"wrapper\">\n            <h1>Dreams</h1>\n\n            <form action=\"submit\">\n              <label htmlFor=\"newTitle\">give your dream a title</label>\n              <input onChange={this.handleTitle} value={this.state.inputTitle}type=\"text\" id=\"newTitle\"/>\n              <label htmlFor=\"newDream\">tell us about a dream youve had</label>\n              <textarea \n                  name=\"newDream\" \n                  id=\"newDream\" \n                  className=\"dreamInput\" \n                  rows=\"10\" \n                  onChange={this.handleChange}\n                  value={this.state.userInput} \n              ></textarea>\n              <button onClick={this.handleClick}>Add Dream</button>\n            </form>\n\n            <p className=\"errorMessage\">{this.state.errorMessage}</p>\n          </div>\n        </section>\n        <section className=\"displaySection\">\n          <ul className=\"dreamDisplay wrapper\">\n            {\n              this.state.dreams.map( (dreamObject) => {\n                return (\n                <li key={dreamObject.key} className=\"returnDream\">\n                  <h2>{dreamObject.data.title}</h2>\n                  <p>{dreamObject.data.dream}</p>\n                  <p>{dreamObject.data.vote}</p>\n                  <button onClick={() => this.handleVote(dreamObject.key)}>upvote</button>\n                  <button onClick={() => this.handleRemove(dreamObject.key)}>remove</button>\n                </li>\n                )\n              })\n            }\n          </ul>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}